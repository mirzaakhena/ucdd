package interactor

import (
	"context"

	"{{PackagePath}}/backend/usecase/{{LowerCase .Name}}/inport"
	"{{PackagePath}}/backend/usecase/{{LowerCase .Name}}/outport"
)

// New{{PascalCase .Name}}Inport ...
func New{{PascalCase .Name}}Inport() inport.{{PascalCase .Name}}Inport {
	return &{{CamelCase .Name}}Usecase{}
}

type {{CamelCase .Name}}Usecase struct {
}

func (_r *{{CamelCase .Name}}Usecase) Handle(ctx context.Context, dataSource outport.{{PascalCase .Name}}Outport, dto inport.{{PascalCase .Name}}Request) (*inport.{{PascalCase .Name}}Response, error) {

	dbCtx := dataSource.GetDB(ctx, true)
	defer dataSource.RollbackTransactionOnException(ctx)
	{{range .Outports}}
	{
		_, err := dataSource.{{PascalCase .Name}}(dbCtx, outport.{{PascalCase .Name}}Request{ {{range .RequestFields}}
			{{PascalCase .}}: "", {{end}}
		})
		if err != nil {
			dataSource.RollbackTransaction(dbCtx)
			return nil, err
		}
	} {{end}}	

	dataSource.CommitTransaction(dbCtx)

	return &inport.{{PascalCase .Name}}Response{}, nil
}
