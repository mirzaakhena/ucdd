package interactor

import (
	"context"

	"{{PackagePath}}/backend/usecase/{{LowerCase .Name}}/inport"
	"{{PackagePath}}/backend/usecase/{{LowerCase .Name}}/outport"
)

// New{{PascalCase .Name}}Inport ...
func New{{PascalCase .Name}}Inport(outputPort outport.{{PascalCase .Name}}Outport) inport.{{PascalCase .Name}}Inport {
	return &{{CamelCase .Name}}Usecase{
		dataSource: outputPort,
	}
}

type {{CamelCase .Name}}Usecase struct {
	dataSource outport.{{PascalCase .Name}}Outport
}

func (_r *{{CamelCase .Name}}Usecase) Handle(ctx context.Context, req inport.{{PascalCase .Name}}Request) (*inport.{{PascalCase .Name}}Response, error) {

	// dbContext := _r.dataSource.GetDB(ctx)
	dbContext, trx := _r.dataSource.GetDBWithTransaction(ctx)
	
	defer trx.Rollback()

	{{range .Outports}}
	{
		_, err := _r.dataSource.{{PascalCase .Name}}(dbContext, outport.{{PascalCase .Name}}Request{ {{range .RequestFields}}
			{{PascalCase .}}: "", {{end}}
		})
		if err != nil {
			return nil, err
		}		
	} {{end}}	

	trx.Commit()

	return &inport.{{PascalCase .Name}}Response{ {{range .Inport.ResponseFields}}
		{{PascalCase .}}: "", {{end}}
	}, nil
}
