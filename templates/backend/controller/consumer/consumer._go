package consumer

import (
	"context"
	"encoding/json"

	"{{PackagePath}}/backend/shared/log"
	"{{PackagePath}}/backend/shared/messagebroker"	
	"{{PackagePath}}/backend/usecase/{{LowerCase .Name}}/inport"
	"{{PackagePath}}/backend/usecase/{{LowerCase .Name}}/outport"
	"github.com/jinzhu/copier"
)



// {{PascalCase .Name}}Consumer ...
func {{PascalCase .Name}}Consumer(inputPort inport.{{PascalCase .Name}}Inport) messagebroker.FunctionHandler {

	// {{CamelCase .Name}}Request ...
	type {{CamelCase .Name}}Request struct { {{range .Inport.RequestFields}}
		{{PascalCase .}}    string `json:"{{CamelCase .}}"` {{end}}
	}

	return func(message []byte) {

		// receive to object
		var messageReq {{CamelCase .Name}}Request
		if err := json.Unmarshal(message, &messageReq); err != nil {
			log.Error("%v", err.Error())
			return
		}

		// convert to request
		var req inport.{{PascalCase .Name}}Request
		copier.Copy(&req, messageReq)
		log.Info("%v", req)

		// run the usecase
		_, err := inputPort.Handle(context.Background(), req)
		if err != nil {
			log.Error("%v", err.Error())
			return
		}

		return
	}

}