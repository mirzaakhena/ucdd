package transaction

import (
	"context"

	"github.com/jinzhu/gorm"
)

// GormTransactionImpl is
type GormTransactionImpl struct {
	DB *gorm.DB
}

// GetDB is
func (g *GormTransactionImpl) GetDB(db context.Context, withTransaction bool) context.Context {
	if withTransaction {
		return context.WithValue(db, TransactionLockKey, g.DB.Begin())
	}
	return context.WithValue(db, TransactionLockKey, g.DB)
}

// CommitTransaction is
func (g *GormTransactionImpl) CommitTransaction(db context.Context) {
	ExtractGormDB(db).Commit()
}

// RollbackTransaction is
func (g *GormTransactionImpl) RollbackTransaction(db context.Context) {
	ExtractGormDB(db).Rollback()
}

// RollbackTransactionOnException is common handler for rollback the transaction
// to avoid database lock when something goes wrong in transaction state
// use with defer right after we call GetDB(true)
func (g *GormTransactionImpl) RollbackTransactionOnException(db context.Context) {

	trx := ExtractGormDB(db)

	// catch the error
	if err := recover(); err != nil {

		// rollback it!
		trx.Rollback()

		// repanic so we can get where it happen in log!
		panic(err)
	}
}

type transactionType string

// TransactionLockKey is
const TransactionLockKey = transactionType("TRANSACTION_LOCK")

// ExtractGormDB is
func ExtractGormDB(ctx context.Context) *gorm.DB {
	db := ctx.Value(TransactionLockKey)
	DB, ok := db.(*gorm.DB)
	if !ok {
		panic("cannot assert to *gorm.DB")
	}
	return DB
}
